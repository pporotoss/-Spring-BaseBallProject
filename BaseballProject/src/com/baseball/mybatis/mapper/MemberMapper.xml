<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Member">
	
	<select id="selectAll" resultType="Member">
		select * from member order by member_id desc
	</select>
	
	<select id="memberAll" resultType="MemberDetail" parameterType="Map">
		select member_id, id, nickname, levelname, username, email, point, t.name as teamname from member m, level l, team t
		where m.level_id = l.level_id and m.team_id = t.team_id and id != 'admin'
		order by member_id
		limit #{startContent},#{pageSize}
	</select>

	<select id="memberSearch" resultType="MemberDetail" parameterType="Map">
		select member_id, id, nickname, levelname, username, email, point, t.name as teamname from member m, level l, team t
		where m.level_id = l.level_id and m.team_id = t.team_id and id != 'admin'
		and id like concat('%',#{keyword},'%')
		order by member_id
		limit #{startContent},#{pageSize}
	</select>
		
	<select id="memberLevel" resultType="MemberDetail" parameterType="Map">
		select member_id, id, nickname, levelname, username, email, point, t.name as teamname from member m, level l, team t
		where m.level_id = l.level_id and m.team_id = t.team_id and id != 'admin' and m.level_id=#{level_id}
		order by member_id
		limit #{startContent},#{pageSize}
	</select>
	
	<select id="selectOne" resultType="MemberDetail" parameterType="int">
		select member_id, id, nickname, levelname, username, email, point, t.name as teamname, pwdHintQuestion, pwdHintAnswer 
		from member m, level l, team t
		where m.level_id = l.level_id and m.team_id = t.team_id and member_id=#{member_id}
	</select>
	
	<select id="totalMember" resultType="int" parameterType="Map">
		select count(member_id) from member where id != 'admin'
		<if test="keyword != null">
			and id like concat('%', #{keyword}, '%')
		</if>
	</select>
	
	<select id="searchUserId" parameterType="String" resultType="String">
		select id 
		from member
		where email=#{email} and id!='admin'
	</select>
	
	<select id="searchUserPwd" parameterType="Map" resultType="int">
		select count(member_id) from member
		where id=#{id} and pwdHintAnswer=#{pwdHintAnswer} and id!='admin'
	</select>
	
	<select id="getPwdHintQuestion" parameterType="String" resultType="String">
		select pwdHintQuestion 
		from member
		where id=#{id} and id!='admin'
	</select>
	
	<insert id="insert" parameterType="Member">
		insert into member(id, nickname, pwd, username, email, team_id, pwdHintQuestion, pwdHintAnswer)
		values(#{id}, #{nickname}, #{pwd}, #{username}, #{email}, #{team_id}, #{pwdHintQuestion}, #{pwdHintAnswer})
	</insert>
	
	<update id="update" parameterType="Member">
		update member set id=#{id}, nickname=#{nickname}, username=#{username}, email=#{email}, team_id=#{team_id}
		, pwdHintQuestion=#{pwdHintQuestion}, pwdHintAnswer=#{pwdHintAnswer}
		<if test="pwd != null">, pwd=#{pwd}</if> 
		where member_id=#{member_id}
	</update>
	
	<update id="updateLevel" parameterType="Member">
		update member set level_id=#{level_id} where member_id=#{member_id}
	</update>
	
	<update id="saveTempPwd" parameterType="Map">
		update member set pwd=#{pwd}
		where id=#{id} and pwdHintAnswer=#{pwdHintAnswer} and id!='admin' 
	</update>
	
	<delete id="delete" parameterType="int">
		delete from member where member_id=#{member_id}
	</delete>
	
	<select id="login" parameterType="String" resultType="Member">
		select member_id, id, nickname, pwd, username, email, team_id, point, m.level_id, rank
		from member m, level l 
		where m.level_id = l.level_id and id=#{id}
	</select>
	
	<select id="getId" resultType="String">
		select id from member 
	</select>
	
	<select id="getNickname" resultType="String">
		select nickname from member 
	</select>
</mapper>